@import "ui-variables.less";
@import "ui-mixins.less";
@import "octicon-mixins";

.list-group,
.list-tree {
  li .character-match {
    .text(normal);
    transition: color @transition-time/2 ease;
  }

  li:hover .character-match {
    .text(highlight);
    transition: color @transition-time/2 ease;
  }

  li.selected:before {
    background: @background-color-selected;
    width: 100vh;
  }

  li.selected .character-match {
    .text(selected);
    font-size: @font-size;
  }

  li.selected .word {
    color: @text-color-selected !important;
  }

  li,
  li.list-item {
    transition: color @transition-time/2 ease;
  }

  li:hover,
  li.list-item:hover {
    .text(highlight);
  }

  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    .text(normal);
  }

  .generate-list-item-text-color(@class) {
    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class}> .list-item {
      .text(@class);
    }
  }
  .generate-list-item-text-color(subtle);
  .generate-list-item-text-color(info);
  .generate-list-item-text-color(success);
  .generate-list-item-text-color(warning);
  .generate-list-item-text-color(error);
  .generate-list-item-text-color(selected);

  .generate-list-item-status-color(@color, @status) {
    li:not(.list-nested-item).status-@{status},
    li.list-nested-item.status-@{status}> .list-item {
      color: @color;
    }

    li:not(.list-nested-item).selected.status-@{status},
    li.list-nested-item.selected.status-@{status}> .list-item {
      color: @color;
    }
  }
  .generate-list-item-status-color(@text-color-subtle, ignored);
  .generate-list-item-status-color(@text-color-added, added);
  .generate-list-item-status-color(@text-color-renamed, renamed);
  .generate-list-item-status-color(@text-color-modified, modified);
  .generate-list-item-status-color(@text-color-removed, removed);

  li:not(.list-nested-item).selected,
  li.list-nested-item.selected > .list-item {
    .text(selected);
    font-size: @font-size
  }
}

.select-list ol.list-group,
&.select-list ol.list-group {
  li pre {
    margin-bottom: 0;
  }

  li.two-lines {
    .secondary-line {
      .text(subtle);
    }

    &.selected .secondary-line {
      .text(selected);
    }
  }

  li.selected {
    background-color: @background-color-selected;

    &:before {
      display: none;
    }

    pre {
      border-color: @text-color-highlight;
    }
  }

  &.mark-active {
    @active-icon-size: 14px;

    li:before {
      content: '';
      background-color: transparent;
      position: static;
      display: inline-block;
      left: auto;
      right: auto;
      height: @active-icon-size;
      width: @active-icon-size;
    }

    > li:not(.active):before {
      margin-right: @component-icon-padding;
    }

    li.active {
      .octicon(check, @active-icon-size);

      &:before {
        margin-right: @component-icon-padding;
        color: @text-color-success;
      }
    }
  }
}

.select-list.popover-list {
  .overlay-shadow();
  background-color: @overlay-background-color;
  border-radius: @component-border-radius !important;
  border: 1px solid @overlay-border-color !important;

  atom-text-editor {
    margin-bottom: @component-padding/2;
  }

  .list-group li {
    padding-left: @component-padding/2;
    transition: color @transition-time/2 ease;
  }
}

.ui-sortable {
  li {
    line-height: 2.5;
  }

  li.ui-sortable-placeholder {
    visibility: visible !important;
    background-color: darken(@pane-item-background-color, 10%);
  }
}

li.ui-draggable-dragging,
li.ui-sortable-helper {
  line-height: @component-line-height;
  height: @component-line-height;
  list-style: none;
  padding: 0 @component-padding;
  background: @background-color-highlight;
}
